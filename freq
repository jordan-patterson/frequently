#!/usr/bin/env python3

import os
import webbrowser
from clmenu import getch,Menu,printLogo
import yaml
import argparse
import pickle
from shutil import copyfile
import subprocess as sub

getch=getch()

main_dir=os.path.expanduser("~")+"/bin/frequently/"

#start up menu options and instruction
startup_layout={"options":["ADD","REMOVE","GO BACK"],"instructions":"WHAT ACTION SHOULD I TAKE?"}

def initialize():
	"""Initialize main directory for storing read/write files"""
	if(not os.path.exists(main_dir)):
		os.makedirs(main_dir)
		copyfile("logo.txt",main_dir+"logo.txt")


def getDict(filename):
	'''
		returns a dictionary saved from a yaml file
	'''
	with open(filename,"r") as file:
		data=yaml.load(file)
	return data

def addSite():
	try:
		sites=getDict(main_dir+"sites.yaml")
	except:
		#file not found, create new dict
		sites={}
	printLogo(main_dir+"logo.txt")
	name=input("\n\n\t\t\tName of website: ")
	url=input("\n\n\t\t\tAddress of website: ")
	sites[name]=url
	update(main_dir+"sites.yaml",sites)

def openSite():
	try:
		sites=getDict(main_dir+"sites.yaml")
	except:
		printLogo(main_dir+"logo.txt")
		print("\n\t\t\t\tError: There were no sites found.")
		getch()
		return None
	options=list(sites.keys())
	options.append("GO BACK")
	instructions="\t\t  WHAT SHOULD I OPEN?"
	menu=Menu(options,instructions,main_dir+"logo.txt")
	temp=0
	while(temp!=len(options)-1):
		temp=menu.prompt()
		if(temp!=len(options)-1):
			webbrowser.open_new_tab("https://"+sites[options[temp]])

def addNewStartSite():
	try:
		sites=getDict(main_dir+"sitesOnStartUp.yaml")
	except:
		sites={}
	printLogo(main_dir+"logo.txt")
	name=input("\n\n\n\t\t\tName of website: ")
	url=input("\n\n\t\t\tAddress of website (www.example.com): ")
	sites[name]=url
	update(main_dir+"sitesOnStartUp.yaml",sites)

def addExistingStartSite():
	try:
		sites=getDict("sites.yaml")
	except:
		printLogo("logo.txt")
		print("\n\n\t\t\t\tError: No websites were found")
		getch()
		return None
	options=list(sites.keys())
	options.append("GO BACK")
	instructions="\n\t\t\t\tWHAT WEBSITE SHOULD I ADD?"
	menu=Menu(options,instructions,main_dir+"logo.txt")
	temp=menu.prompt()
	if(temp!=len(options)-1):
		try:
			startupSites=getDict(main_dir+"sitesOnStartUp.yaml")
		except:
			startupSites={}
		finally:
			startupSites[options[temp]]=sites[options[temp]]
			update(main_dir+"sitesOnStartUp.yaml",startupSites)

def addStartUpWebsite():
	options=["NEW","EXISTING","GO BACK"]
	instructions="SELECT THE TYPE"
	menu=Menu(options,instructions,main_dir+"logo.txt")
	temp=9
	while(temp!=len(options)-1):
		temp=menu.prompt()
		if(temp==0):
			addNewStartSite()
		elif(temp==1):
			addExistingStartSite()

#takes a filename and a dictionary as arguments, overwrites the file with dictionary
def update(filename,dictionary):
	with open(filename,'w') as file:
		yaml.dump(dictionary,file)

def removeSite(filename):
	try:
		sites=getDict(filename)
	except:
		printLogo(main_dir+"logo.txt")
		print("\n\n\t\t\t\tError: There are no sites to remove")
		getch()
		return None
	options=list(sites.keys())
	options.append("GO BACK")
	instructions="\n\n\t\t\t\tWHAT SHOULD I REMOVE?"
	menu=Menu(options,instructions,main_dir+"logo.txt")
	temp=menu.prompt()
	if(temp!=len(options)-1):
		del sites[options[temp]]
		update(filename,sites)

def website():
	options=["OPEN WEBSITE","ADD WEBSITE","REMOVE","GO BACK"]
	instructions="\tWHAT ACTION SHOULD I TAKE?"
	menu=Menu(options,instructions,main_dir+"logo.txt")
	temp=0
	while(temp!=len(options)-1):
		temp=menu.prompt()
		if(temp==0):
			openSite()
		elif(temp==1):
			addSite()
		elif(temp==2):
			removeSite(main_dir+"sites.yaml")

def openTextEditor():
	if(not os.path.exists(main_dir+"config.yml")):
		printLogo("logo.txt")
		editor=input("\n\n\t\t\t\tName of text editor: ")
		with open(main_dir+"config.yml","a") as file:
			yaml.dump({"editor":editor},file)
	with open(main_dir+"config.yml","r") as file:
		data=yaml.load(file)
	editor=data["editor"]
	os.system(editor)

def addScript():
	try:
		scripts=getDict(main_dir+"scripts.yml")
	except:
		scripts={}
	printLogo(main_dir+"logo.txt")
	name=input("\n\n\n\t\t\tEnter the name of the script: ")
	path=''
	while(not os.path.exists(path)):
		path=input("\n\n\t\t\tEnter a valid path to where the script is located:")
	scripts[name]=path
	update(main_dir+"scripts.yml",scripts)

def addNewStartupScript():
	try:
		scripts=getDict(main_dir+"startupScripts.yml")
	except:
		#create new dict
		scripts={}
	printLogo("logo.txt")
	name=input("\n\n\t\t\t Enter the name you wish to call the executable: ")
	path=''
	while(not os.path.exists(path)):
		path=input("\n\n\t\t\t Enter a valid path to where the exec is located: ")
	scripts[name]=path
	update(main_dir+"startupScripts.yml",scripts)

def addExistingStartupScript():
	try:
		existing_scripts=getDict("scripts.yml")
	except:
		printLogo("logo.txt")
		print("\n\n\t\t\t\tError: No scripts were found")
		getch()
		return None
	options=list(existing_scripts.keys())
	options.append("GO BACK")
	instructions="\tWHAT EXECUTABLE SHOULD I ADD?"
	menu=Menu(options,instructions,main_dir+"logo.txt")
	temp=menu.prompt()
	if(temp!=len(options)-1):
		try:
			scripts=getDict(main_dir+"startupScripts.yml")
		except:
			scripts={}
		finally:
			scripts[options[temp]]=existing_scripts[options[temp]]
			update(main_dir+"startupScripts.yml",scripts)

def addScriptOnStartup():
	options=["NEW","EXISTING","GO BACK"]
	instructions="\t   SELECT THE TYPE"
	menu=Menu(options,instructions,main_dir+"logo.txt")
	temp=9
	while(temp!=len(options)-1):
		temp=menu.prompt()
		if(temp==0):
			addNewStartupScript()
		elif(temp==1):
			addExistingStartupScript()

def removeScript(filename):
	try:
		scripts=getDict(filename)
	except:
		printLogo(main_dir+"logo.txt")
		print("\n\n\t\t\tError: There are no scripts to remove")
		getch()
		return None
	options=list(scripts.keys())
	options.append("GO BACK")
	instructions="\t  What should I remove?"
	menu=Menu(options,instructions,main_dir+"logo.txt")
	temp=menu.prompt()
	if(temp!=len(options)-1):
		del scripts[options[temp]]
		update(filename,scripts)

def run(path):
	maindir=os.getcwd()
	executable=path.split('/')[-1]#obtain name of executable from path
	path=path.strip(executable)
	os.chdir(path)#go to directory where executable is located
	os.system("gnome-terminal -e './"+executable+"'")
	os.chdir(maindir)#return back to program's directory

def runScript():
	try:
		scripts=getDict(main_dir+"scripts.yml")
	except:
		printLogo(main_dir+"logo.txt")
		print("\n\n\t\t\t\tError: There were no executables found")
		getch()
		return None
	options=list(scripts.keys())
	options.append("GO BACK")
	instructions="\t  Select the executable you want to run"
	menu=Menu(options,instructions,main_dir+"logo.txt")
	temp=0
	while(temp!=len(options)-1):
		temp=menu.prompt()
		if(temp!=len(options)-1):
			run(scripts[options[temp]])

def scripts():
	options=["RUN EXECUTABLE","ADD EXECUTABLE","REMOVE","GO BACK"]
	instructions="\t What action should I take?"
	menu=Menu(options,instructions,main_dir+"logo.txt")
	temp=0
	while(temp!=len(options)-1):
		temp=menu.prompt()
		if(temp==0):
			runScript()
		elif(temp==1):
			addScript()
		elif(temp==2):
			removeScript(main_dir+"scripts.yml")

def openTerminal():
	terminal_commands=["konsole","xterm","gnome-terminal"]
	for i in range(len(terminal_commands)):
		try:
			sub.Popen([terminal_commands[i]],stdout=sub.PIPE,stderr=sub.PIPE)
			break
		except:
			continue

def removeCommand(filename):
	commands=getCommands(filename)
	if(commands):
		commands.append("GO BACK")
		instructions="\t SELECT A COMMAND TO REMOVE"
		menu=Menu(commands,instructions,main_dir+"logo.txt")
		temp=menu.prompt()
		if(temp!=len(commands)-1):
			commands.remove(commands[temp])
			commands.remove("GO BACK")
			#update file
			updateCommands(commands,filename)
	else:
		printLogo(main_dir+"logo.txt")
		print("\n\t\t\t\tError: There are no commands to be removed")
		getch()

def updateCommands(commands,filename):
	with open(filename,"wb") as file:
		pickle.dump(commands,file)

def addExisitingCommandOnStart():
	commands=getCommands(main_dir+"commands.dat")
	if(commands):
		commands.append("GO BACK")
		instructions="SELECT A COMMAND"
		menu=Menu(commands,instructions,main_dir+"logo.txt")
		temp=menu.prompt()
		if(temp!=len(commands)-1):# if commands[temp]!="GO BACK"
			addCommand(commands[temp],main_dir+"commandOnStart.dat")
	else:
		printLogo(main_dir+"logo.txt")
		print("\n\t\t\t\tError: No existing commands were found")
		getch()

def addCommandOnStartup():
	options=["NEW","EXISTING","GO BACK"]
	instructions="\tSELECT THE TYPE"
	menu=Menu(options,instructions,main_dir+"logo.txt")
	temp=0
	while(temp!=len(options)-1):
		temp=menu.prompt()
		if(temp==0):
			printLogo(main_dir+"logo.txt")
			command=input("\n\t\t\t\tENTER THE COMMAND: ")
			addCommand(command,main_dir+"commandOnStart.dat")
		elif(temp==1):
			addExisitingCommandOnStart()

def addCommand(command,filename):
	commands=getCommands(filename)
	if(commands):
		commands.append(command)
	else:
		#create new list
		commands=[command]
	#overwrite or add updated list to file
	updateCommands(commands,filename)

def getCommands(filename):
	'''
		returns a list of strings saved to a file called filename
	'''
	try:
		file=open(filename,"rb")
		commands=pickle.load(file)
		return commands
	except:
		return None

def runCommand():
	commands=getCommands(main_dir+"commands.dat")
	if(commands):
		commands.append("GO BACK")
		instructions="Which command should I run?"
		menu=Menu(commands,instructions,main_dir+"logo.txt")
		temp=menu.prompt()
		if(temp!=len(commands)-1):#if commands[temp]!="GO BACK"
			startCommand(commands[temp])
	else:
		printLogo(main_dir+"logo.txt")
		print("\n\t\t\t\tError: No commands were found")
		getch()

def commands():
	options=["RUN COMMAND","ADD COMMAND","REMOVE","GO BACK"]
	instructions="\tWHAT ACTION SHOULD I TAKE?"
	menu=Menu(options,instructions,main_dir+"logo.txt")
	temp=0
	while(temp!=len(options)-1):
		temp=menu.prompt()
		if(temp==0):
			runCommand()
		elif(temp==1):
			printLogo(main_dir+"logo.txt")
			command=input("\n\t\t\t\tEnter the new command: ")
			addCommand(command,"commands.dat")
		elif(temp==2):
			removeCommand(main_dir+"commands.dat")

def websiteOnStart():
	menu=Menu(startup_layout["options"],startup_layout["instructions"],main_dir+"logo.txt")
	temp=0
	while(temp!=len(startup_layout["options"])-1):
		temp=menu.prompt()
		if(temp==0):
			addStartUpWebsite()
		elif(temp==1):
			removeSite(main_dir+"sitesOnStartUp.yaml")

def commandOnStart():
	menu=Menu(startup_layout["options"],startup_layout["instructions"],main_dir+"logo.txt")
	temp=0
	while(temp!=len(startup_layout["options"])-1):
		temp=menu.prompt()
		if(temp==0):
			addCommandOnStartup()
		elif(temp==1):
			removeCommand("commandOnStart.dat")

def exeOnStart():
	menu=Menu(startup_layout["options"],startup_layout["instructions"],main_dir+"logo.txt")
	temp=0
	while(temp!=len(startup_layout["options"])-1):
		temp=menu.prompt()
		if(temp==0):
			addScriptOnStartup()
		elif(temp==1):
			removeScript(main_dir+"startupScripts.yml")

def startupActions():
	options=["COMMAND","WEBSITE","EXECUTABLE","GO BACK"]
	instructions="\tSELECT AN OPTION"
	menu=Menu(options,instructions,main_dir+"logo.txt")
	temp=0
	while(temp!=len(options)-1):
		temp=menu.prompt()
		if(temp==0):
			commandOnStart()
		elif(temp==1):
			websiteOnStart()
		elif(temp==2):
			exeOnStart()

def main():
	options=["COMMAND","WEBSITE","EXECUTABLE","TERMINAL","TEXT EDITOR","STARTUP ACTIONS","EXIT"]
	instructions="\t WHAT DO YOU WANNA DO?"
	menu=Menu(options,instructions,main_dir+"logo.txt")
	temp=9
	while(temp!=len(options)-1):
		temp=menu.prompt()
		if(temp==0):
			commands()
		elif(temp==1):
			website()
		elif(temp==2):
			scripts()
		elif(temp==3):
			openTerminal()
		elif(temp==4):
			openTextEditor()
		elif(temp==5):
			startupActions()

def startCommand(command):
	terminal_commands=["konsole","gnome-terminal","xterm"]
	for terminal in terminal_commands:
		try:
			sub.Popen([terminal,'-e',command],stdout=sub.PIPE,stderr=sub.PIPE)
			break
		except:
			continue

def startAllCommands():
	commands=getCommands(main_dir+"commandOnStart.dat")
	if(commands):
		for command in commands:
			startCommand(command)

def startallWebsites():
	try:
		sites=getDict(main_dir+"sitesOnStartUp.yaml")
	except:
		return None
	for site in sites.items():
		webbrowser.open_new_tab("https://"+site[1])

def startAllScripts():
	try:
		scripts=getDict(main_dir+"startupScripts.yml")
	except:
		return None
	for script in scripts.items():
		run(script[1])

if __name__=="__main__":
	initialize()
	parser=argparse.ArgumentParser(prog="Frequently")
	parser.add_argument('-a','--all',help="Starts all listed scripts and websites on start",action="store_true")
	parser.add_argument('-w','--web',help="Starts all listed websites on start",action="store_true")
	parser.add_argument('-e','--ex',help="Starts all listed executables on start",action="store_true")
	parser.add_argument('-c','--co',help="Starts all listed commands on start",action="store_true")
	args=parser.parse_args()
	if(args.all):
		startallWebsites()
		startAllScripts()
		startAllCommands()
	elif(args.web):
		startallWebsites()
	elif(args.ex):
		startAllScripts()
	elif(args.co):
		startAllCommands()
	main()
	#website()